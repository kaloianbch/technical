{"version":3,"sources":["components/Banner.jsx","components/Filter.jsx","components/InfoCard.jsx","components/Video.jsx","App.js","serviceWorker.js","index.js","res/bannerImg.png"],"names":["Banner","react_default","a","createElement","className","id","src","bannerImg","alt","width","Component","FilterBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filterQuery","clickHandler","bind","assertThisInitialized","changeHandler","event","preventDefault","onClick","_this2","setState","target","value","toLowerCase","trim","undefined","callback","href","InputGroup_default","type","placeholder","onChange","Append","Text","index_es","icon","faSearch","children","React","FilterMenu","_this$props","style","labeledBy","aria-labelledby","Children","toArray","filter","child","includes","Filter","_this3","missionList","setFilterText","getBody","getDropdownItems","passSelectedMission","_this4","fetch","then","response","json","responseJson","text","_this5","map","missionListItem","Dropdown_default","Item","key","flight_number","mission_name","missionInfo","_this6","filterCallback","rocket","first_stage","cores","forEach","coreItem","other_flights","findOtherFlights","core_serial","console","log","serial","missionId","otherFlights","missionItem","push","Toggle","as","Menu","InfoCard","imgArr","links","flickr_images","flightNumber","tbd","payloadList","second_stage","payloads","staticFireTime","dateConvert","static_fire_date_unix","launchTime","launch_date_unix","launchZone","launch_site","site_name","launchSuccess","launch_success","addPayloadInfo","addPassIcon","rocketName","rocket_name","rocketType","rocket_type","coreList","addCoreInfo","description","details","linkList","reddit_campaign","reddit_launch","reddit_recovery","reddit_media","presskit","article_link","wikipedia","addLinks","list","linkItem","payloadItem","payload_mass_kg","payload_id","payload_type","count","addOtherFlights","landing_intent","landing_vehicle","land_success","length","flightItem","unixTimeStamp","Date","toUTCString","checkBool","succsessMsg","failMsg","addTooltip","faCheckCircle","color","faTimesCircle","fontAwesomeIcon","msg","OverlayTrigger_default","overlay","Tooltip_default","addImgContent","addRowOneContent","addRowTwoContent","addDescriptionAndLinks","Video","link","allowFullScreen","App","selectedMission","setSelectedMission","getCard","src_components_InfoCard","youtube_id","src_components_Video","components_Banner","src_components_Filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.56d3a1e7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport bannerImg from '../res/bannerImg.png'\r\n\r\nclass Banner extends Component {\r\n    render() {\r\n        return (\r\n            <div className='d-flex justify-content-center' id='banner'>\r\n                <img id='bannerImg' src={bannerImg} alt='SpaceX Explore' width='500rem'/>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Banner;","import React, {Component} from 'react';\r\nimport './Filter.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faSearch} from '@fortawesome/free-solid-svg-icons/faSearch'\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\n/*\r\n    Dropdown Toggle override component that replaces default button with a missionSelect bar.\r\n */\r\nclass FilterBar extends React.Component { //TODO - add filter options\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filterQuery: ''\r\n        };\r\n\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n    }\r\n\r\n    clickHandler(event) {\r\n        event.preventDefault();\r\n        this.props.onClick(event);\r\n    }\r\n    /*\r\n        The change handler passes the input value back to the parent Filter component.\r\n     */\r\n    changeHandler(event) {\r\n        event.preventDefault();\r\n        this.setState({filterQuery: event.target.value.toLowerCase().trim()}, ()=>{\r\n            if(this.props.callback !== undefined){\r\n                this.props.callback(this.state.filterQuery);\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <a id='filterBarParent' href=\"\" onClick={this.clickHandler}>\r\n                <InputGroup>\r\n                    <input type='text' className='form-control' placeholder='Search...' value={this.state.filterQuery}\r\n                           onChange={this.changeHandler}/>\r\n                    <InputGroup.Append>\r\n                        <InputGroup.Text id='basic-addon1'><FontAwesomeIcon icon={faSearch}/></InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n                {this.props.children}\r\n            </a>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n    Dropdown menu override component that produces a list only of elements containing the provided string prop\r\n */\r\nclass FilterMenu extends React.Component {  //TODO - stylize\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            children,\r\n            style,\r\n            className,\r\n            'aria-labelledby': labeledBy,\r\n            filterQuery,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div style={style} className={className} aria-labelledby={labeledBy}>\r\n                <ul id='dropDownList' className='list-unstyled'>\r\n                    {React.Children.toArray(children).filter(\r\n                        child =>\r\n                            !filterQuery || child.props.children.toLowerCase().includes(filterQuery),\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Filter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            missionList: null,      //list for storing API information\r\n            filterQuery : ''\r\n        };\r\n        this.setFilterText = this.setFilterText.bind(this);\r\n        this.getBody = this.getBody.bind(this);\r\n        this.getDropdownItems = this.getDropdownItems.bind(this);\r\n        this.passSelectedMission = this.passSelectedMission.bind(this);\r\n    }\r\n\r\n    /*\r\n        On mounting the main App component it attempts fetches the API information\r\n     */\r\n    componentDidMount() {\r\n        fetch('https://api.spacexdata.com/v3/launches')\r\n            .then(response => response.json())\r\n            .then(responseJson => {\r\n                this.setState({\r\n                    missionList: responseJson,\r\n                })\r\n            })\r\n    }\r\n\r\n    setFilterText(text){\r\n        this.setState({filterQuery: text})\r\n    }\r\n\r\n    /*\r\n        Populates the Dropdown menu with items derived from the API list.\r\n     */\r\n    getDropdownItems(){\r\n        return this.state.missionList.map((missionListItem) =>\r\n            <Dropdown.Item key={missionListItem.flight_number} onClick={() => this.passSelectedMission(missionListItem)}>\r\n                <div id='dropDownItem'className='container-fluid'>{missionListItem.mission_name}</div>\r\n            </Dropdown.Item>\r\n        );\r\n    }\r\n\r\n    passSelectedMission(missionInfo){\r\n        if(this.props.filterCallback !== undefined){\r\n            missionInfo.rocket.first_stage.cores.forEach((coreItem) =>{\r\n                coreItem.other_flights = this.findOtherFlights(coreItem.core_serial, missionInfo.flight_number);\r\n            });\r\n            console.log(missionInfo);\r\n            this.props.filterCallback(missionInfo);\r\n        }\r\n    }\r\n\r\n    findOtherFlights(serial, missionId){\r\n        let otherFlights = [];\r\n        this.state.missionList.forEach((missionItem) =>{\r\n            missionItem.rocket.first_stage.cores.forEach((coreItem) =>{\r\n                if(coreItem.core_serial === serial && missionItem.flight_number !== missionId){\r\n                    otherFlights.push({flight_number: missionItem.flight_number, mission_name: missionItem.mission_name})\r\n                }\r\n            })\r\n        });\r\n        return otherFlights;\r\n    }\r\n\r\n    /*\r\n        This method provides a loading indicator for the app while it fetches the API data\r\n        return: jsx main body of the filter component\r\n     */\r\n    getBody() {\r\n        if (this.state.missionList !== null) {\r\n            return (\r\n                <div id='filter' className='input-group col-10'>\r\n                    <Dropdown className='container-fluid'>\r\n                        <Dropdown.Toggle as={FilterBar} id='dropdown-custom-components' callback={this.setFilterText}>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu id='dropdownMenu' className='container-fluid' as={FilterMenu}\r\n                                       filterQuery={this.state.filterQuery}>\r\n                            {this.getDropdownItems()}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div id='appBody' className='container-fluid'>\r\n                    <div id='loading' className='d-flex justify-content-center'> Fetching data from SpaceX API...</div></div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='d-flex justify-content-center'>\r\n                {this.getBody()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filter;","import React, {Component} from 'react';\r\nimport './InfoCard.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCheckCircle} from '@fortawesome/free-solid-svg-icons/faCheckCircle';\r\nimport {faTimesCircle} from '@fortawesome/free-solid-svg-icons/faTimesCircle';\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\n\r\nclass InfoCard extends Component {  //TODO - lots of formatting and style changes\r\n    /*\r\n        Appends first available image to the info card, if available\r\n        return jsx div with image\r\n     */\r\n    addImgContent() {    //TODO - static div height; carousel\r\n        const imgArr = this.props.missionInfo.links.flickr_images;\r\n        if(imgArr[0] !== undefined) {\r\n            return <div id='cardImgContrainer' className='col-md-4'>\r\n                <img id='cardImg' className='rounded' alt='Failed to Load Image' src={imgArr[0]}/>\r\n            </div>\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n    /*\r\n        Appends the first row of information ot the card.\r\n        return: jsx div with content dependent on availability\r\n     */\r\n    addRowOneContent(){\r\n        const missionInfo = {\r\n            flightNumber: this.props.missionInfo.flight_number,\r\n            tbd: this.props.missionInfo.tbd,\r\n            payloadList: this.props.missionInfo.rocket.second_stage.payloads,\r\n            staticFireTime: this.dateConvert(this.props.missionInfo.static_fire_date_unix),\r\n            launchTime: this.dateConvert(this.props.missionInfo.launch_date_unix),\r\n            launchZone: this.props.missionInfo.launch_site.site_name,\r\n            launchSuccess: this.props.missionInfo.launch_success,\r\n        };\r\n        return(\r\n            <div className='container-fluid'>\r\n                <div className='row'>\r\n                    SpaceX Flight #{missionInfo.flightNumber}\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-md-5'>Payload:</div>\r\n                    <div className='col-md-7'>{this.addPayloadInfo(missionInfo.payloadList)}\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-md-5'>Launch Time:</div>\r\n                    <div className='col-md-7'>{(missionInfo.launchTime !== null) ? <span>{missionInfo.launchTime}</span>\r\n                        : <span>No Information</span>}</div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-md-5'>Static Fire Test:</div>\r\n                    <div className='col-md-7'>{(missionInfo.staticFireTime !== null) ? <span>{missionInfo.staticFireTime}</span>\r\n                        : <span>No Information</span>}</div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-md-5'>Launch Site:</div>\r\n                    <div className='col-md-7'>{(missionInfo.launchZone !== null) ?\r\n                        <span>{missionInfo.launchZone} {(missionInfo.launchSuccess !== null) ?\r\n                            this.addPassIcon(missionInfo.launchSuccess, 'The rocket launched successfully',\r\n                                'The rocket failed to launch') :   <span></span>}\r\n                        </span>\r\n                        : <span>No Information</span>}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /*\r\n       Appends the second row of information ot the card.\r\n       return: jsx div with content dependent on availability\r\n    */\r\n    addRowTwoContent(){\r\n        const missionInfo = {\r\n            rocketName: this.props.missionInfo.rocket.rocket_name,\r\n            rocketType: this.props.missionInfo.rocket.rocket_type,\r\n            coreList: this.props.missionInfo.rocket.first_stage.cores,\r\n        };\r\n        return(\r\n            <div className='container-fluid'>\r\n                <div className='row'>\r\n                    <div className='col-md-5'>Rocket:</div>\r\n                    <div className='col-md-7'>{(missionInfo.rocketName !== null) ?\r\n                        <span>{missionInfo.rocketName}{\r\n                            (missionInfo.rocketType !==null)? <span>({missionInfo.rocketType})</span>:\r\n                                <span></span>\r\n                        }</span>\r\n                        : <span>To Be Confirmed</span>}\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    {this.addCoreInfo(missionInfo.coreList)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /*\r\n       Appends the last row, containing the description string and links list.\r\n       return: jsx div with content dependent on availability\r\n    */\r\n    addDescriptionAndLinks(){\r\n        const missionInfo = {\r\n            description: this.props.missionInfo.details,\r\n            linkList: [\r\n                this.props.missionInfo.links.reddit_campaign,\r\n                this.props.missionInfo.links.reddit_launch,\r\n                this.props.missionInfo.links.reddit_recovery,\r\n                this.props.missionInfo.links.reddit_media,\r\n                this.props.missionInfo.links.presskit,\r\n                this.props.missionInfo.links.article_link,\r\n                this.props.missionInfo.links.wikipedia\r\n            ],\r\n        };\r\n        return(\r\n            <div className='col-md-10'>\r\n                {(missionInfo.description !== null) ?\r\n                    <div className='row'>Description:<br/>{missionInfo.description}</div> : <span></span>}\r\n                <div className='row'>\r\n                    {(missionInfo.linkList !== undefined)?\r\n                        <div className='container-fluid'>Links:<br/><ul>\r\n                            {this.addLinks(missionInfo.linkList)}</ul></div>\r\n                            : <span></span>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    /*\r\n        Creates list items for links retrieved from the mission information\r\n        arg: list list of link items provided by the API\r\n        return: jsx <li> elements\r\n     */\r\n    addLinks(list){\r\n        return (\r\n            list.map((linkItem) => (linkItem !== null) ? <li><a href={linkItem}>{linkItem}</a></li> : null)\r\n        );\r\n    }\r\n\r\n    /*\r\n        Creates list for the mission payload items\r\n        arg: list list of payload items provided by the API\r\n        return: jsx\r\n     */\r\n    addPayloadInfo(list){\r\n        return (list !== undefined) ?\r\n            list.map((payloadItem) => (payloadItem.payload_mass_kg !== null) ?\r\n                <span>- {payloadItem.payload_id}({payloadItem.payload_type}) - {payloadItem.payload_mass_kg}kg</span>\r\n                : <span>- {payloadItem.payload_id}({payloadItem.payload_type})</span>)\r\n            : <span>No Information</span>\r\n    }\r\n\r\n    /*\r\n        Creates list of information for the cores(first stage boosters) used/to be used in the missions.\r\n        arg: list list of core items provided by the API\r\n        return: jsx\r\n     */\r\n    addCoreInfo(list){\r\n        let count = 1;\r\n        return (list !== undefined) ?\r\n            list.map((coreItem) => <div className='container-fluid'>\r\n                    <div className='row'>\r\n                        <div className='col-md-5'>Core {count++}:</div>\r\n                        <div className='col-md-7'>{(coreItem.core_serial !== null) ? coreItem.core_serial :\r\n                            <span>No serial number information</span>}\r\n                        </div>\r\n                    </div>\r\n                    {this.addOtherFlights(coreItem)}\r\n                        {coreItem.landing_intent ?\r\n                            <div className='row'>\r\n                                <div className='col-md-5'>Landing Site:</div>\r\n                                <div className='col-md-7'>{coreItem.landing_vehicle} {(coreItem.land_success !== null) ?\r\n                                    this.addPassIcon(coreItem.land_success, 'The first stage booster landed successfully',\r\n                                        'The first stage booster failed to land') :   <span></span>}\r\n                                </div>\r\n                            </div> :<span></span>\r\n                        }\r\n            </div>\r\n            ): null\r\n    }\r\n\r\n    /*\r\n        Creates list of other missions a given core was used in.\r\n        arg: list list of core items provided by the API\r\n        return: jsx\r\n     */\r\n    addOtherFlights(coreItem){\r\n        console.log(coreItem.other_flights);\r\n        return (coreItem.other_flights.length !== 0) ?\r\n            <div className='row'>\r\n                <div className='col-md-5'> - Previous Flights:</div>\r\n                <div className='col-md-7'>\r\n                    {coreItem.other_flights.map((flightItem) =>\r\n                        <p>Flight #{flightItem.flight_number}({flightItem.mission_name})</p>)\r\n                    }\r\n                </div>\r\n            </div>\r\n            : null\r\n    }\r\n\r\n    /*\r\n        Converts Unix timestamp to presentable format\r\n        arg: unixTimeStamp provided by the API\r\n        return: string translated UTC timestamp\r\n     */\r\n    dateConvert(unixTimeStamp){\r\n        if(unixTimeStamp !== null) {\r\n            let date = new Date(unixTimeStamp * 1000);\r\n            return date.toUTCString()   //TODO - override ToString\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n    /*\r\n        Creates a pass or fail icon with a tooltip message.\r\n        arg: checkBool boolean to be evaluated\r\n        arg: successMsg string for if boolean is true\r\n        arg: failMsg string for if boolean is false\r\n        return: jsx icon with tooltip\r\n     */\r\n    addPassIcon(checkBool, succsessMsg, failMsg){\r\n        let successStyle = {color:'#77DD77'};\r\n        let failureStyle = {color:'#FF033E'};\r\n        return checkBool ? this.addTooltip(<FontAwesomeIcon icon={faCheckCircle} style={successStyle}/>, succsessMsg) :\r\n            this.addTooltip(<FontAwesomeIcon icon={faTimesCircle} style={failureStyle}/>, failMsg)\r\n    }\r\n\r\n    /*\r\n        Adds a tooltip message to a given element\r\n        arg: fontAwesomeIcon  jsx\r\n        arg: msg string to display in the tooltip\r\n     */\r\n    addTooltip(fontAwesomeIcon, msg){\r\n        return <OverlayTrigger overlay={<Tooltip id={`tooltip-top`}>{msg}</Tooltip>}>\r\n            {fontAwesomeIcon}\r\n        </OverlayTrigger>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='infoCardContainer' className='container-fluid align-content-md-center'>\r\n                <div id='infoCard' className='card col-11 justify-content-center'>\r\n                    <div className='container-fluid'>\r\n                        <div className='row'>\r\n                            {this.addImgContent()}\r\n                            <div id='infoRowOne' className='col-md-4 fa-border'>\r\n                                {this.addRowOneContent()}\r\n                            </div>\r\n                            <div id='infoRowTwo' className='col-md-4 fa-border'>\r\n                                {this.addRowTwoContent()}\r\n                            </div>\r\n                        </div>\r\n                        <div className='row'>\r\n                            {this.addDescriptionAndLinks()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InfoCard;","import React, {Component} from 'react';\r\nimport './Video.css'\r\n\r\n    class Video extends Component{ //TODO - Add scroll down indicator\r\n    render() {\r\n        return (\r\n            <div className='d-flex justify-content-center'>\r\n                <div id='video' className=\"embed-responsive embed-responsive-16by9\">\r\n                    <iframe className=\"embed-responsive-item\" src={this.props.link} allowFullScreen>\r\n\r\n                    </iframe>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Video;","import React, {Component} from 'react';\nimport './App.css';\nimport Banner from './components/Banner.jsx'\nimport Filter from './components/Filter';\nimport InfoCard from './components/InfoCard';\nimport Video from \"./components/Video\";\n\n/*\n    The main App component renders the banner and footer, and after the API fetch is complete also a filter bar for the\n    list provided by the API. When an item is selected it passed to an InfoCard component.\n */\nclass App extends Component {   //TODO - find proper documentation tool for React\n    constructor(props){\n        super(props);\n\n        this.state = {\n            selectedMission: undefined,  //the selected list item as per the missionSelect\n        };\n        this.setSelectedMission = this.setSelectedMission.bind(this);\n        this.getCard = this.getCard.bind(this);\n    }\n\n    setSelectedMission(missionInfo){\n        this.setState({selectedMission: missionInfo});\n    }\n\n    /*\n        This adds an info card if the missionSelect filterQuery has retrieved a valid mission selection\n        return: jsx information card\n     */\n    getCard(){\n        if(this.state.selectedMission !== undefined){\n            return <div>\n                <InfoCard id='infoCard' missionInfo={this.state.selectedMission}/>\n                {(this.state.selectedMission.links.youtube_id !== null)?\n                    <Video link ={'https://www.youtube.com/embed/' + this.state.selectedMission.links.youtube_id}/>\n                    : <span></span>\n                }\n            </div>\n        }\n        else  {\n            return null\n        }\n    };\n\n    render() {\n        return (\n            <div className='container-fluid'>\n                <Banner/>\n                <div id='appBody' className='container-fluid'>\n                    <div id='appBody' className='container-fluid'>\n                        <Filter filterCallback={this.setSelectedMission}/>{this.getCard()}\n                    </div>\n                </div>\n                <footer id='footer' className='d-flex justify-content-center'>\n                    Brought to you by&nbsp;<a id='gitHubLink' href='http://github.com/kaloianbch/'>Kal</a>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-bootstrap/dist/react-bootstrap.min.js'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bannerImg.81d40ec1.png\";"],"sourceRoot":""}